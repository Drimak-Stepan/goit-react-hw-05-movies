{"version":3,"file":"static/js/565.6bd1a376.chunk.js","mappings":"ySAEaA,EAAUC,EAAAA,EAAAA,GAAH,2GAMPC,EAAcD,EAAAA,EAAAA,GAAH,2EAKXE,EAASF,EAAAA,EAAAA,GAAH,oG,SC4DnB,EAlEiB,WACf,OAA0BG,EAAAA,EAAAA,UAAS,CACjCC,MAAO,GACPC,SAAS,EACTC,MAAO,OAHT,eAAOC,EAAP,KAAcC,EAAd,KAKQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,oGAEdJ,GAAS,SAAAK,GAAS,yBACbA,GADa,IAEhBR,SAAS,EACTC,MAAO,MAHS,IAFJ,UAQOQ,EAAAA,EAAAA,IAAeL,GARtB,OAQRM,EARQ,OASdP,GAAS,SAAAK,GACP,OAAO,kBACFA,GADL,IAEET,MAAOW,GAEV,IAda,gDAgBdP,GAAS,SAAAK,GAAS,yBACbA,GADa,IAEhBP,MAAK,MAFW,IAhBJ,yBAqBdE,GAAS,SAAAK,GACP,OAAO,kBACFA,GADL,IAEER,SAAS,GAEZ,IA1Ba,4EAAH,qDA8BfO,GACD,GAAE,CAACH,IAEJ,IACMO,EADYT,EAAVH,MACea,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,OACzB,UAACpB,EAAD,YACE,gBACEqB,IACmB,OAAjBD,EAAA,0CACuCA,GACnCE,EAENC,IAAKL,KAEP,UAACjB,EAAD,oBAAeiB,MACf,uCAAeC,OAVCF,EADO,IAe3B,OACE,iCACE,oCACA,SAACnB,EAAD,UAAUiB,MAGf,C,wLCrEKS,E,QAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAgB,mCAAG,2GAAOC,EAAP,+BAAc,EAAd,SACPN,EAASO,IAAI,sBAAuB,CACzDJ,OAAQ,CACNG,KAAAA,KAH0B,uBACtBE,EADsB,EACtBA,KADsB,kBAOvBA,EAAKC,SAPkB,2CAAH,qDAUhBC,EAAe,mCAAG,WAAMjB,GAAN,yFACNO,EAASO,IAAT,iBAAuBd,IADjB,uBACrBe,EADqB,EACrBA,KADqB,kBAGtBA,GAHsB,2CAAH,sDAMfnB,EAAc,mCAAG,WAAMI,GAAN,yFACLO,EAASO,IAAT,iBAAuBd,EAAvB,aADK,uBACpBe,EADoB,EACpBA,KADoB,kBAGrBA,EAAKG,MAHgB,2CAAH,sDAMdC,EAAe,mCAAG,WAAMnB,GAAN,yFACNO,EAASO,IAAT,iBAAuBd,EAAvB,aADM,uBACrBe,EADqB,EACrBA,KADqB,kBAGtBA,EAAKC,SAHiB,2CAAH,sDAMfI,EAAW,mCAAG,WAAMC,GAAN,yFACFd,EAASO,IAAT,gBAA8B,CAAEJ,OAAQ,CAAEW,MAAAA,KADxC,uBACjBN,EADiB,EACjBA,KADiB,kBAGlBA,EAAKC,SAHa,2CAAH,qD","sources":["pages/CastPage/CastPage.styled.jsx","pages/CastPage/CastPage.jsx","shared/api/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Wrapper = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 200px);\n  gap: 16px;\n`;\n\nexport const CardWrapper = styled.li`\n  border: 1px solid black;\n  border-radius: 4px;\n`;\n\nexport const Author = styled.h3`\n  padding: 4px;\n  margin-top: 10px;\n  margin-bottom: 0;\n  color: black;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getMovieActors } from 'shared/api/api';\nimport comeBack from '../../shared/come_back.jpg';\nimport { Wrapper, Author, CardWrapper } from './CastPage.styled';\n\nconst CastPage = () => {\n  const [state, setState] = useState({\n    items: [],\n    loading: false,\n    error: null,\n  });\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        setState(prevState => ({\n          ...prevState,\n          loading: true,\n          error: null,\n        }));\n\n        const result = await getMovieActors(movieId);\n        setState(prevState => {\n          return {\n            ...prevState,\n            items: result,\n          };\n        });\n      } catch (error) {\n        setState(prevState => ({\n          ...prevState,\n          error,\n        }));\n      } finally {\n        setState(prevState => {\n          return {\n            ...prevState,\n            loading: false,\n          };\n        });\n      }\n    };\n\n    fetchCast();\n  }, [movieId]);\n\n  const { items } = state;\n  const elements = items.map(({ id, name, character, profile_path }) => (\n    <CardWrapper key={id}>\n      <img\n        src={\n          profile_path !== null\n            ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n            : comeBack\n        }\n        alt={name}\n      />\n      <Author>Name: {name}</Author>\n      <p>Character: {character}</p>\n    </CardWrapper>\n  ));\n\n  return (\n    <>\n      <h2>Actors</h2>\n      <Wrapper>{elements}</Wrapper>\n    </>\n  );\n};\n\nexport default CastPage;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'a3e9617806211f5c17cdc3e47a9d3960',\n  },\n});\n\nexport const getTrendingFilms = async (page = 1) => {\n  const { data } = await instance.get('/trending/movie/day', {\n    params: {\n      page,\n    },\n  });\n\n  return data.results;\n};\n\nexport const getMovieDetails = async id => {\n  const { data } = await instance.get(`/movie/${id}`);\n\n  return data;\n};\n\nexport const getMovieActors = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n\n  return data.cast;\n};\n\nexport const getMovieReviews = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n\n  return data.results;\n};\n\nexport const searchMovie = async query => {\n  const { data } = await instance.get(`/search/movie`, { params: { query } });\n\n  return data.results;\n};\n"],"names":["Wrapper","styled","CardWrapper","Author","useState","items","loading","error","state","setState","movieId","useParams","useEffect","fetchCast","prevState","getMovieActors","result","elements","map","id","name","character","profile_path","src","comeBack","alt","instance","axios","baseURL","params","api_key","getTrendingFilms","page","get","data","results","getMovieDetails","cast","getMovieReviews","searchMovie","query"],"sourceRoot":""}